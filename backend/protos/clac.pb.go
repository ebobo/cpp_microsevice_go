// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: protos/clac.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuestionRaised struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	A    int32  `protobuf:"varint,2,opt,name=A,proto3" json:"A,omitempty"`
	B    int32  `protobuf:"varint,3,opt,name=B,proto3" json:"B,omitempty"`
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QuestionRaised) Reset() {
	*x = QuestionRaised{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_clac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionRaised) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionRaised) ProtoMessage() {}

func (x *QuestionRaised) ProtoReflect() protoreflect.Message {
	mi := &file_protos_clac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionRaised.ProtoReflect.Descriptor instead.
func (*QuestionRaised) Descriptor() ([]byte, []int) {
	return file_protos_clac_proto_rawDescGZIP(), []int{0}
}

func (x *QuestionRaised) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionRaised) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *QuestionRaised) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *QuestionRaised) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Result int32  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_clac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_clac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_protos_clac_proto_rawDescGZIP(), []int{1}
}

func (x *Answer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Answer) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

var File_protos_clac_proto protoreflect.FileDescriptor

var file_protos_clac_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x41, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x87, 0x01, 0x0a,
	0x0a, 0x43, 0x6c, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x10, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x62, 0x6f, 0x62, 0x6f, 0x2f, 0x63, 0x70, 0x70, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_clac_proto_rawDescOnce sync.Once
	file_protos_clac_proto_rawDescData = file_protos_clac_proto_rawDesc
)

func file_protos_clac_proto_rawDescGZIP() []byte {
	file_protos_clac_proto_rawDescOnce.Do(func() {
		file_protos_clac_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_clac_proto_rawDescData)
	})
	return file_protos_clac_proto_rawDescData
}

var file_protos_clac_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protos_clac_proto_goTypes = []interface{}{
	(*QuestionRaised)(nil), // 0: protos.QuestionRaised
	(*Answer)(nil),         // 1: protos.Answer
	(*emptypb.Empty)(nil),  // 2: google.protobuf.Empty
}
var file_protos_clac_proto_depIdxs = []int32{
	2, // 0: protos.Claculator.Questions:input_type -> google.protobuf.Empty
	1, // 1: protos.Claculator.QuestionAnswered:input_type -> protos.Answer
	0, // 2: protos.Claculator.Questions:output_type -> protos.QuestionRaised
	2, // 3: protos.Claculator.QuestionAnswered:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_clac_proto_init() }
func file_protos_clac_proto_init() {
	if File_protos_clac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_clac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionRaised); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_clac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_clac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_clac_proto_goTypes,
		DependencyIndexes: file_protos_clac_proto_depIdxs,
		MessageInfos:      file_protos_clac_proto_msgTypes,
	}.Build()
	File_protos_clac_proto = out.File
	file_protos_clac_proto_rawDesc = nil
	file_protos_clac_proto_goTypes = nil
	file_protos_clac_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClaculatorClient is the client API for Claculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClaculatorClient interface {
	// rpc GetResult (Question) returns (Answer) {}
	// use grpc client to start a stream for monitering comming question
	Questions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Claculator_QuestionsClient, error)
	QuestionAnswered(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type claculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewClaculatorClient(cc grpc.ClientConnInterface) ClaculatorClient {
	return &claculatorClient{cc}
}

func (c *claculatorClient) Questions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Claculator_QuestionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Claculator_serviceDesc.Streams[0], "/protos.Claculator/Questions", opts...)
	if err != nil {
		return nil, err
	}
	x := &claculatorQuestionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Claculator_QuestionsClient interface {
	Recv() (*QuestionRaised, error)
	grpc.ClientStream
}

type claculatorQuestionsClient struct {
	grpc.ClientStream
}

func (x *claculatorQuestionsClient) Recv() (*QuestionRaised, error) {
	m := new(QuestionRaised)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *claculatorClient) QuestionAnswered(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.Claculator/QuestionAnswered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClaculatorServer is the server API for Claculator service.
type ClaculatorServer interface {
	// rpc GetResult (Question) returns (Answer) {}
	// use grpc client to start a stream for monitering comming question
	Questions(*emptypb.Empty, Claculator_QuestionsServer) error
	QuestionAnswered(context.Context, *Answer) (*emptypb.Empty, error)
}

// UnimplementedClaculatorServer can be embedded to have forward compatible implementations.
type UnimplementedClaculatorServer struct {
}

func (*UnimplementedClaculatorServer) Questions(*emptypb.Empty, Claculator_QuestionsServer) error {
	return status.Errorf(codes.Unimplemented, "method Questions not implemented")
}
func (*UnimplementedClaculatorServer) QuestionAnswered(context.Context, *Answer) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionAnswered not implemented")
}

func RegisterClaculatorServer(s *grpc.Server, srv ClaculatorServer) {
	s.RegisterService(&_Claculator_serviceDesc, srv)
}

func _Claculator_Questions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClaculatorServer).Questions(m, &claculatorQuestionsServer{stream})
}

type Claculator_QuestionsServer interface {
	Send(*QuestionRaised) error
	grpc.ServerStream
}

type claculatorQuestionsServer struct {
	grpc.ServerStream
}

func (x *claculatorQuestionsServer) Send(m *QuestionRaised) error {
	return x.ServerStream.SendMsg(m)
}

func _Claculator_QuestionAnswered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClaculatorServer).QuestionAnswered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Claculator/QuestionAnswered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClaculatorServer).QuestionAnswered(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

var _Claculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Claculator",
	HandlerType: (*ClaculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuestionAnswered",
			Handler:    _Claculator_QuestionAnswered_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Questions",
			Handler:       _Claculator_Questions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/clac.proto",
}
